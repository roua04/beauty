// Importing the module to be tested
const { handleClick, handleFilter } = require('./your-module');
// Mocking jQuery
jest.mock('jquery', () => ({
  on: jest.fn(),
  ready: jest.fn(),
  show: jest.fn(),
  hide: jest.fn(),
  filter: jest.fn(),
}));
// Importing the mocked jQuery
const $ = require('jquery');
describe('handleClick', () => {
  it('should add and remove the "active" class', () => {
    // Mocking a DOM element
    const element = document.createElement('li');
    const addClassMock = jest.fn();
    const removeClassMock = jest.fn();
    element.classList = {
      add: addClassMock,
      remove: removeClassMock,
    };
    // Calling the function to test
    handleClick.call(element);
    // Assertions
    expect(addClassMock).toHaveBeenCalledWith('active');
    expect(removeClassMock).toHaveBeenCalledWith('active');
  });
});
describe('handleFilter', () => {
  it('should show all new product boxes if value is "all"', () => {
    const event = { target: { getAttribute: () => 'all' } };
    // Calling the function to test
    handleFilter(event);

    // Assertions
    expect($.show).toHaveBeenCalledWith('1000');
  });

  it('should filter and show specific new product boxes if value is not "all"', () => {
    const event = { target: { getAttribute: () => 'some-value' } };

    // Calling the function to test
    handleFilter(event);

    // Assertions
    expect($.not).toHaveBeenCalledWith('.some-value');
    expect($.filter).toHaveBeenCalledWith('.some-value');
    expect($.show).toHaveBeenCalledWith('1000');
  });
});

// mock/return_value //
// Importing the mocked jQuery
const $ = require('jquery');

describe('handleClick', () => {
  it('should add and remove the "active" class', () => {
    // Mocking a DOM element
    const element = document.createElement('li');
    const addClassMock = jest.fn();
    const removeClassMock = jest.fn();
    element.classList = {
      add: addClassMock,
      remove: removeClassMock,
    };

    // Calling the function to test
    handleClick.call(element);

    // Assertions
    expect(addClassMock).toHaveBeenCalledWith('active');
    expect(removeClassMock).toHaveBeenCalledWith('active');
  });
});

describe('handleFilter', () => {
  it('should show all new product boxes if value is "all"', () => {
    const event = { target: { getAttribute: () => 'all' } };

    // Mocking the $.show function and specifying return value
    $.show.mockReturnValue('mocked return value');

    // Calling the function to test
    handleFilter(event);

    // Assertions
    expect($.show).toHaveBeenCalledWith('1000');
    expect($.show).toHaveReturnedWith('mocked return value');
  });

  it('should filter and show specific new product boxes if value is not "all"', () => {
    const event = { target: { getAttribute: () => 'some-value' } };

    // Mocking the $.not and $.filter functions
    $.not.mockReturnValueThis();
    $.filter.mockReturnValue('mocked return value');

    // Calling the function to test
    handleFilter(event);

    // Assertions
    expect($.not).toHaveBeenCalledWith('.some-value');
    expect($.filter).toHaveBeenCalledWith('.some-value');
    expect($.show).toHaveBeenCalledWith('1000');
  });
});
//mock /side_effect //
// Importing the mocked jQuery
const $ = require('jquery');

describe('handleClick', () => {
  it('should add and remove the "active" class', () => {
    // Mocking a DOM element
    const element = document.createElement('li');
    const addClassMock = jest.fn();
    const removeClassMock = jest.fn();
    element.classList = {
      add: addClassMock,
      remove: removeClassMock,
    };

    // Calling the function to test
    handleClick.call(element);

    // Assertions
    expect(addClassMock).toHaveBeenCalledWith('active');
    expect(removeClassMock).toHaveBeenCalledWith('active');
  });
});

describe('handleFilter', () => {
  it('should show all new product boxes if value is "all"', () => {
    const event = { target: { getAttribute: () => 'all' } };

    // Mocking the $.show function with side effect
    $.show.mockImplementation(() => console.log('Mocked $.show was called'));

    // Calling the function to test
    handleFilter(event);

    // Assertions
    expect($.show).toHaveBeenCalledWith('1000');
  });

  it('should filter and show specific new product boxes if value is not "all"', () => {
    const event = { target: { getAttribute: () => 'some-value' } };

    // Mocking the $.not and $.filter functions with side effects
    $.not.mockImplementation(() => console.log('Mocked $.not was called'));
    $.filter.mockImplementation(() => console.log('Mocked $.filter was called'));

    // Calling the function to test
    handleFilter(event);

    // Assertions
    expect($.not).toHaveBeenCalledWith('.some-value');
    expect($.filter).toHaveBeenCalledWith('.some-value');
    expect($.show).toHaveBeenCalledWith('1000');
  });
});
